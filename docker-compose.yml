version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: larp-manager-postgres
    environment:
      POSTGRES_DB: larp_manager_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d larp_manager_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - larp-manager-network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: larp-manager-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@larp-manager.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - larp-manager-network
    profiles:
      - pgadmin

  # Redis for caching (future use)
  redis:
    image: redis:7-alpine
    container_name: larp-manager-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - larp-manager-network
    profiles:
      - redis

  # Development application container
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: larp-manager-app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/larp_manager_db
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/src/larp_manager_server.egg-info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - larp-manager-network
    profiles:
      - app
    command: uvicorn src.larp_manager_server.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  larp-manager-network:
    driver: bridge